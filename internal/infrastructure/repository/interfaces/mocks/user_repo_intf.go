// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces/user_repo_intf.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	requestmodels "github.com/ashkarax/vegn-eCommerce/internal/models/request_models"
	responsemodels "github.com/ashkarax/vegn-eCommerce/internal/models/response_models"
	gomock "github.com/golang/mock/gomock"
)

// MockIuserRepo is a mock of IuserRepo interface.
type MockIuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIuserRepoMockRecorder
}

// MockIuserRepoMockRecorder is the mock recorder for MockIuserRepo.
type MockIuserRepoMockRecorder struct {
	mock *MockIuserRepo
}

// NewMockIuserRepo creates a new mock instance.
func NewMockIuserRepo(ctrl *gomock.Controller) *MockIuserRepo {
	mock := &MockIuserRepo{ctrl: ctrl}
	mock.recorder = &MockIuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIuserRepo) EXPECT() *MockIuserRepoMockRecorder {
	return m.recorder
}

// AddMoneyToWallet mocks base method.
func (m *MockIuserRepo) AddMoneyToWallet(arg0 *string, arg1 *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoneyToWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMoneyToWallet indicates an expected call of AddMoneyToWallet.
func (mr *MockIuserRepoMockRecorder) AddMoneyToWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoneyToWallet", reflect.TypeOf((*MockIuserRepo)(nil).AddMoneyToWallet), arg0, arg1)
}

// ChangeUserStatusActive mocks base method.
func (m *MockIuserRepo) ChangeUserStatusActive(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatusActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatusActive indicates an expected call of ChangeUserStatusActive.
func (mr *MockIuserRepoMockRecorder) ChangeUserStatusActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatusActive", reflect.TypeOf((*MockIuserRepo)(nil).ChangeUserStatusActive), arg0)
}

// ChangeUserStatusById mocks base method.
func (m *MockIuserRepo) ChangeUserStatusById(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatusById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatusById indicates an expected call of ChangeUserStatusById.
func (mr *MockIuserRepoMockRecorder) ChangeUserStatusById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatusById", reflect.TypeOf((*MockIuserRepo)(nil).ChangeUserStatusById), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockIuserRepo) CreateUser(userData *requestmodels.UserSignUpReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", userData)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIuserRepoMockRecorder) CreateUser(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIuserRepo)(nil).CreateUser), userData)
}

// EditUserDetails mocks base method.
func (m *MockIuserRepo) EditUserDetails(arg0 *requestmodels.UserEditProf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserDetails indicates an expected call of EditUserDetails.
func (mr *MockIuserRepoMockRecorder) EditUserDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserDetails", reflect.TypeOf((*MockIuserRepo)(nil).EditUserDetails), arg0)
}

// GetHashPassAndStatus mocks base method.
func (m *MockIuserRepo) GetHashPassAndStatus(arg0 string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashPassAndStatus", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetHashPassAndStatus indicates an expected call of GetHashPassAndStatus.
func (mr *MockIuserRepoMockRecorder) GetHashPassAndStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashPassAndStatus", reflect.TypeOf((*MockIuserRepo)(nil).GetHashPassAndStatus), arg0)
}

// GetLatestUsers mocks base method.
func (m *MockIuserRepo) GetLatestUsers() (*[]responsemodels.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUsers")
	ret0, _ := ret[0].(*[]responsemodels.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUsers indicates an expected call of GetLatestUsers.
func (mr *MockIuserRepoMockRecorder) GetLatestUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUsers", reflect.TypeOf((*MockIuserRepo)(nil).GetLatestUsers))
}

// GetUserByStatus mocks base method.
func (m *MockIuserRepo) GetUserByStatus(arg0 string) (*[]responsemodels.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByStatus", arg0)
	ret0, _ := ret[0].(*[]responsemodels.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByStatus indicates an expected call of GetUserByStatus.
func (mr *MockIuserRepoMockRecorder) GetUserByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByStatus", reflect.TypeOf((*MockIuserRepo)(nil).GetUserByStatus), arg0)
}

// GetUserId mocks base method.
func (m *MockIuserRepo) GetUserId(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockIuserRepoMockRecorder) GetUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockIuserRepo)(nil).GetUserId), arg0)
}

// GetUserProfile mocks base method.
func (m *MockIuserRepo) GetUserProfile(arg0 *string) (*responsemodels.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0)
	ret0, _ := ret[0].(*responsemodels.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockIuserRepoMockRecorder) GetUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockIuserRepo)(nil).GetUserProfile), arg0)
}

// IsUserExist mocks base method.
func (m *MockIuserRepo) IsUserExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockIuserRepoMockRecorder) IsUserExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockIuserRepo)(nil).IsUserExist), arg0)
}

// SearchUserByIdOrName mocks base method.
func (m *MockIuserRepo) SearchUserByIdOrName(arg0 int, arg1 string) (*[]responsemodels.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByIdOrName", arg0, arg1)
	ret0, _ := ret[0].(*[]responsemodels.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByIdOrName indicates an expected call of SearchUserByIdOrName.
func (mr *MockIuserRepoMockRecorder) SearchUserByIdOrName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByIdOrName", reflect.TypeOf((*MockIuserRepo)(nil).SearchUserByIdOrName), arg0, arg1)
}
