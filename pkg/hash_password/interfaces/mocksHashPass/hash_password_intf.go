// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hash_password/interfaces/hash_password_intf.go

// Package mocksHashPass is a generated GoMock package.
package mocksHashPass

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHashPass is a mock of IHashPass interface.
type MockIHashPass struct {
	ctrl     *gomock.Controller
	recorder *MockIHashPassMockRecorder
}

// MockIHashPassMockRecorder is the mock recorder for MockIHashPass.
type MockIHashPassMockRecorder struct {
	mock *MockIHashPass
}

// NewMockIHashPass creates a new mock instance.
func NewMockIHashPass(ctrl *gomock.Controller) *MockIHashPass {
	mock := &MockIHashPass{ctrl: ctrl}
	mock.recorder = &MockIHashPassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashPass) EXPECT() *MockIHashPassMockRecorder {
	return m.recorder
}

// CompairPassword mocks base method.
func (m *MockIHashPass) CompairPassword(hashedPassword, plainPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompairPassword", hashedPassword, plainPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompairPassword indicates an expected call of CompairPassword.
func (mr *MockIHashPassMockRecorder) CompairPassword(hashedPassword, plainPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompairPassword", reflect.TypeOf((*MockIHashPass)(nil).CompairPassword), hashedPassword, plainPassword)
}

// HashPassword mocks base method.
func (m *MockIHashPass) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIHashPassMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIHashPass)(nil).HashPassword), password)
}
