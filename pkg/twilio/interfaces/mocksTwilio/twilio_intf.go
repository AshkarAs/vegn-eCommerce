// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/twilio/interfaces/twilio_intf.go

// Package mocksTwilio is a generated GoMock package.
package mocksTwilio

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	twilio "github.com/twilio/twilio-go"
)

// MockITwilio is a mock of ITwilio interface.
type MockITwilio struct {
	ctrl     *gomock.Controller
	recorder *MockITwilioMockRecorder
}

// MockITwilioMockRecorder is the mock recorder for MockITwilio.
type MockITwilioMockRecorder struct {
	mock *MockITwilio
}

// NewMockITwilio creates a new mock instance.
func NewMockITwilio(ctrl *gomock.Controller) *MockITwilio {
	mock := &MockITwilio{ctrl: ctrl}
	mock.recorder = &MockITwilioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITwilio) EXPECT() *MockITwilioMockRecorder {
	return m.recorder
}

// SendOTP mocks base method.
func (m *MockITwilio) SendOTP(phone string, client *twilio.RestClient) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTP", phone, client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTP indicates an expected call of SendOTP.
func (mr *MockITwilioMockRecorder) SendOTP(phone, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTP", reflect.TypeOf((*MockITwilio)(nil).SendOTP), phone, client)
}

// TwilioClient mocks base method.
func (m *MockITwilio) TwilioClient() *twilio.RestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioClient")
	ret0, _ := ret[0].(*twilio.RestClient)
	return ret0
}

// TwilioClient indicates an expected call of TwilioClient.
func (mr *MockITwilioMockRecorder) TwilioClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioClient", reflect.TypeOf((*MockITwilio)(nil).TwilioClient))
}

// VerifyOtp mocks base method.
func (m *MockITwilio) VerifyOtp(phone, otp string, client *twilio.RestClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", phone, otp, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockITwilioMockRecorder) VerifyOtp(phone, otp, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockITwilio)(nil).VerifyOtp), phone, otp, client)
}
